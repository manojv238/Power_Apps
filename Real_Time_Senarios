✅ My Day-to-Day Activities & Working Process:

🔹 Task Assignment & Planning:
Tasks are assigned by the Team Lead or Project Manager through Azure DevOps or Jira.
I start my day by reviewing assigned tasks and attend the daily stand-up meeting for updates and planning.

🔹 Canvas App Development:
Work on building or modifying Canvas Apps based on business requirements.
Design forms, screens, and logic using Power Fx, handle delegation, validations, and improve performance using collections and variables.
Implement role-based visibility, patch data to SharePoint or Dataverse, and test thoroughly.

🔹 Power Automate Flows:
Create and manage flows that automate processes like approvals, notifications, file uploads.
Connect flows with Power Apps using .Run() method and pass/receive parameters.
Debug and improve existing flows using Run History and error handling (Scope + Configure Run After).

🤝 Collaboration Tasks:
1. Attend daily stand-ups with the team and give status updates.
2. Coordinate with BAs for requirements, testers for bug fixes, and leads for deployment.
3. Participate in code reviews and sprint planning sessions.
4. Promote solutions between Dev → Test → Prod environments.

🧠 Final Interview Line:
"So overall, my daily work is a mix of development, automation, collaboration, and continuous improvement of business apps using Power Platform."
---------------------------------------------------------------------------------------------------------------------------------------------------

1. How to call Power Apps to Power Automate:-

"Yes, I’ve worked on calling Power Automate from Power Apps in several use cases. Here's how I approach it:
🔹 Step 1: I create an Instant cloud flow in Power Automate
I use the PowerApps trigger as the starting point.
If I need to pass values like user input or form data, I use ‘Ask in PowerApps’ inside actions like Initialize variable or Compose.
Then, I add logic like creating a SharePoint item or sending email.
If needed, I include a ‘Respond to PowerApps’ action to return data like a confirmation message or record ID back to the app.

🔹 Step 2: In Power Apps, I call the flow using the .Run() function
For example, in a button’s OnSelect, I use:
SubmitFlow.Run(TextInput1.Text)
This passes user input directly to the flow.
I also handle success/failure messages using Notify() funtion for better user experience.
----------------------------------------------------------------------------------------------------------------------------------------

2. Explain real-time challenges you faced while working on Canvas App and Model-Driven App, and how you overcame them:

🔹 Challenge-1: Delegation Limit with SharePoint (5000+ items)
---------------------------------------------------------------
"In one of my Canvas Apps, we were using SharePoint as the data source, and the list had more than 5000 records.
Because of the delegation limit, only 500 records were loading, and filters or searches didn’t work properly for the full list.

💡 How I Solved It:
I used delegable functions like Filter() and StartsWith() instead of non-delegable ones like Search() and ForAll().
Indexed the columns in SharePoint (like Title, Status) to support delegation.
Implemented pagination logic when needed, using FirstN() and Skip() for loading large datasets in smaller chunks.
Used ClearCollect() on app start to store only required filtered data locally to improve performance.

🔹 Challenge-2: File upload from Power Apps to SharePoint
---------------------------------------------------------
"In one of my Canvas App projects, users needed to upload files like images or PDFs and store them in a SharePoint document library.
But Canvas Apps don’t support direct file uploads to SharePoint."

💡 How I Solved It:
I used the Add Picture control to allow users to select a file.
Triggered a Power Automate flow using .Run(): UploadFileFlow.Run(AddMediaButton1.Media, "filename.pdf")
In the flow:
Used the PowerApps trigger to receive the file.
Converted the media to Base64.
Used the Create file action to upload it to a SharePoint document library.


💨 If they ask, “Did you face any other challenges?”, you can say:

😎 "Yes, I’ve also handled tricky scenarios like role-based screen visibility and optimizing form performance, 
    but these two were the most impactful in terms of user experience and technical resolution." 
----------------------------------------------------------------------------------------------------------------------------------------------

3. When did you feel the app was tricky or difficult while developing it?

"One of the trickiest parts during development was when I had to handle dynamic visibility and role-based access in a Canvas App. 
Unlike model-driven apps, Canvas Apps don’t have built-in security roles, so I had to build a custom logic from scratch.

It was difficult because:
I had to ensure different roles (Admin, Manager, User) saw only what they were allowed to.
I had to secure not just screens, but also buttons, forms, and data visibility.
Testing this for different users without breaking other functionality was also challenging.

🔧 How I Overcame It:
I created a custom SecurityRoleList in SharePoint Datasource.
Each entry mapped a user's email to a role (Admin, Manager, etc.).
On app start, 
I used the User().Email function and stored the user’s role in a global variable:
Set(userRole, LookUp(SecurityRoleList, UserEmail = User().Email, Role))

Then, I used this variable to dynamically show/hide controls or navigate users:
If(userRole = "Admin", Navigate(AdminScreen), Navigate(UserScreen))

For buttons or components: Visible: userRole = "Manager"
---------------------------------------------------------------------------------------------------------------------------------------------

🎯 Question: Can you tell me about your Current Project? What are the roles, responsibilities, and work?

✅ Natural Answer:
Currently, I am working on the Steelcase Project, which is a leading furniture company in the US. I’m working as a Power Platform Developer,
where my role mainly involves developing and supporting business applications using Power Apps, Power Automate, Dataverse, and SharePoint.

😎 I’ve worked on two key applications in this project:

🔹 First – the Inventory Management App (Canvas App):
🎯 Purpose: 
Earlier, Steelcase was managing stock across multiple warehouses using Excel, which caused manual errors and delays. 
I developed a responsive Canvas App to centralize inventory tracking.

👉 So in this app, I implemented features like:
------------------------------------------------
✔ Search and Filter option, so users don’t have to scroll through long lists. They can quickly find products by category, warehouse, or product name.
✔ I also designed a low-stock alert system. For example, if the quantity of any item goes below 5, a red warning symbol is shown to the warehouse manager.
✔ Another important feature was role-based access. The warehouse managers have edit rights, so they can update stock levels, 
  but normal staff members only have view access.
✔ Finally, I built a warehouse grouping view, where managers can compare inventory across different locations.

🔹 Second – the Order Tracking App (Model-Driven App):
🎯 Purpose:
Procurement teams earlier tracked purchase orders through emails and Excel, which was inefficient.
So I built a Model-Driven App with Dataverse to streamline PO management and vendor tracking.

👉 So in this app, I implemented features like:
------------------------------------------------
✔ I designed custom Dataverse tables and forms to capture all purchase order details,
  I also built dashboards so that procurement teams could easily see pending approvals and vendor performance.
✔ For the workflow, I integrated Power Automate – whenever an order was created, it automatically sent an approval request to procurement managers. 
  Agents were only allowed to create or update orders, but managers had the final authority to approve or reject them.

🎯 My Responsibilities include:
--------------------------------
✔ Gathering requirements from business users.
✔ Designing and developing Power Apps (Canvas & Model-Driven).
✔ Building automation flows in Power Automate.
✔ Managing data sources like SharePoint & Dataverse.
✔ Handling role-based security, validations, and performance optimization.
✔ Collaborating with QA and deployment teams to move apps across environments.
✔ I also participate in requirement discussions, sprint planning, and daily stand-ups, and update my work in Azure DevOps/Jira.
--------------------------------------------------------------------------------------------------------------------------------------------------------
😎 Warehouse Managers = People who manage and oversee stock in warehouses.
✔ They are usually client-side users (employees of Steelcase).
✔ They need to add/edit/update stock levels because they are responsible for inventory accuracy.

😎 Normal Staff Members = The warehouse staff working under the managers.
✔ They are also client-side users.
✔ They might be responsible for checking stock, moving products, packing, etc.
✔ They only need to view the stock information but should not be allowed to edit (to prevent mistakes or unauthorized changes).

✔ Procurement Team (Business Users) → People in the company who handle buying goods/services from vendors.
✔ Procurement Agents (Staff-level users) → Junior staff who create or update purchase orders (but cannot approve).
✔ Procurement Managers (Approvers) → Senior staff who review, approve, or reject purchase orders.
------------------------------------------------------------------------------------------------------------------------------------------




















