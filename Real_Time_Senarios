1. What is your day-to-day activities and what is the process and what is the role and responsibilities? So how you worked on it?

👉 In my current role as a Power Platform Developer at Wipro, I work in an Agile environment.
-------------------------
🔹 Day-to-day activities:
-------------------------
👉 My day usually starts with a daily stand-up meeting, where I share yesterday’s progress, today’s plan, and if i have any blockers.
👉 After that, I pick the tasks form Jira Board, Tasks are assigned by the Team Lead or Project Manager through a Jira.
😎 These tasks like:
— sometimes it’s designing and building new Canvas apps or Model-Driven apps, 
— sometimes creating or updating Power Automate flows for approvals and notifications, 
— and other times enhancing existing apps with new features or bug any issues.

😎 During development:
— I focus a lot on responsive UI design for Canvas App, 
— Writing Power Fx formulas,
— handling delegation issues when working with large datasets in SharePoint,
— integrating with SharePoint or Dataverse, 
— and setting up role-based security in apps.
👉 I spend time on requirement discussions with the Business Analyst or Product Owner,
   — to make sure I fully understand the requirements and business needs before a starting development.
👉 Once development is done, I do unit testing for my features and support QA if needed.
👉 At the end of day, I update task status in DevOps/Jira Board and push my changes for review.

🎯 So overall, my role has been end-to-end development — designing, building, and automating workflows 
   — and these apps really helped the business by reducing manual errors, improving visibility, and speeding up approval cycles.

------------------------------
🎯 My Role & Responsibilities:
------------------------------
✔ Gathering requirements from business users.
✔ Designing and developing Power Apps (Canvas & Model-Driven).
✔ Building automation flows in Power Automate.
✔ Managing data sources like SharePoint & Dataverse.
✔ Handling role-based security, validations, and performance optimization.
✔ Collaborating with QA and deployment teams to move apps across environments.
✔ I also participate in requirement discussions, sprint planning, and daily stand-ups, and update my work in Azure DevOps/Jira.
---------------------------------------------------------------------------------------------------------------------------------------------------

2. Can you tell me about your Current Project?

👉 Currently, I am working on the STEELCASE PROJECT, which is a leading furniture company in the US. I’m working as a Power Platform Developer,
   – where my role mainly involves developing and supporting business applications using Power Apps, Power Automate, Dataverse, and SharePoint.
😎 I’ve worked on two key applications in this project:
✅ First – the Inventory Management App (Canvas App):
🎯 Purpose: 
– Earlier, Steelcase was managing furniture stock using Excel, which caused manual errors and delays. 
– I developed a responsive Canvas App to track furniture stock across multiple warehouses.
👉 So in this app, I implemented features like:
------------------------------------------------
✔ Search and Filter option, so users don’t have to scroll through long lists. They can quickly find products by category, warehouse, or product name.
✔ I also designed a low-stock alert system. For example, if the quantity of any item goes below 5, a red warning symbol is shown to the warehouse manager.
✔ Another important feature was role-based access. The warehouse managers have edit rights, so they can update stock levels, 
  but normal staff members only have view access.
✔ Finally, I built a warehouse grouping view, where managers can compare inventory across different locations.

✅ Second – the Order Tracking App (Model-Driven App):
🎯 Purpose:
– Procurement teams earlier tracked purchase orders through emails and Excel, which was inefficient.
– So I built a Model-Driven App with Dataverse to monitor vendor purchase orders, delivery timelines, and approvals.
👉 So in this app, I implemented features like:
------------------------------------------------
✔ I designed custom Dataverse tables and forms to capture all purchase order details,
  I also built dashboards so that procurement teams could easily see pending approvals and vendor performance.
✔ For the workflow, I integrated Power Automate – whenever an order was created, it automatically sent an approval request to procurement managers. 
  Agents were only allowed to create or update orders, but managers had the final authority to approve or reject them.
----------------------------------------------------------------------------------------------------------------------------------------------------------------
😎 Warehouse Managers = People who manage and oversee stock in warehouses.
✔ They are usually client-side users (employees of Steelcase).
✔ They need to add/edit/update stock levels because they are responsible for inventory accuracy.

😎 Normal Staff Members = The warehouse staff working under the managers.
✔ They are also client-side users.
✔ They might be responsible for checking stock, moving products, packing, etc.
✔ They only need to view the stock information but should not be allowed to edit (to prevent mistakes or unauthorized changes).

✔ Procurement Team (Business Users) → People in the company who handle buying goods/services from vendors.
✔ Procurement Agents (Staff-level users) → Junior staff who create or update purchase orders (but cannot approve).
✔ Procurement Managers (Approvers) → Senior staff who review, approve, or reject purchase orders.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
1. How to call Power Apps to Power Automate:-

👉 Yes, I’ve used Power Automate flows inside Power Apps many times.
For example: 
In my Steelcase Inventory App, whenever a user added a new product,I had to trigger a workflow to send a notification and log details in another list.

👉 To do that, I created a Power Automate flow first, and then I exposed it as a function inside Power Apps using the Power Automate connector. 
Inside Power Apps, I can call the flow from a control, usually a button’s OnSelect property, using:

✅ MyFlow.Run(Parameters)

👉 This way, I could pass values like Product Name, Category, or Quantity from the app into the flow, 
and the flow handled the background automation — such as approvals, emails, or updates.
----------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Explain real-time challenges you faced while working on Canvas App and Model-Driven App, and how you overcame them:

🔹 Challenge-1: Delegation Limit with SharePoint (5000+ items)
---------------------------------------------------------------
"In one of my Canvas Apps, we were using SharePoint as the data source, and the list had more than 5000 records.
Because of the delegation limit, only 500 records were loading, and filters or searches didn’t work properly for the full list.

💡 How I Solved It:
I used delegable functions like Filter() and StartsWith() instead of non-delegable ones like Search() and ForAll().
Indexed the columns in SharePoint (like Title, Status) to support delegation.
Implemented pagination logic when needed, using FirstN() and Skip() for loading large datasets in smaller chunks.
Used ClearCollect() on app start to store only required filtered data locally to improve performance.

🔹 Challenge-2: File upload from Power Apps to SharePoint
---------------------------------------------------------
"In one of my Canvas App projects, users needed to upload files like images or PDFs and store them in a SharePoint document library.
But Canvas Apps don’t support direct file uploads to SharePoint."

💡 How I Solved It:
I used the Add Picture control to allow users to select a file.
Triggered a Power Automate flow using .Run(): UploadFileFlow.Run(AddMediaButton1.Media, "filename.pdf")
In the flow:
Used the PowerApps trigger to receive the file.
Converted the media to Base64.
Used the Create file action to upload it to a SharePoint document library.


💨 If they ask, “Did you face any other challenges?”, you can say:

😎 "Yes, I’ve also handled tricky scenarios like role-based screen visibility and optimizing form performance, 
    but these two were the most impactful in terms of user experience and technical resolution." 
----------------------------------------------------------------------------------------------------------------------------------------------

3. When did you feel the app was tricky or difficult while developing it?

"One of the trickiest parts during development was when I had to handle dynamic visibility and role-based access in a Canvas App. 
Unlike model-driven apps, Canvas Apps don’t have built-in security roles, so I had to build a custom logic from scratch.

It was difficult because:
I had to ensure different roles (Admin, Manager, User) saw only what they were allowed to.
I had to secure not just screens, but also buttons, forms, and data visibility.
Testing this for different users without breaking other functionality was also challenging.

🔧 How I Overcame It:
I created a custom SecurityRoleList in SharePoint Datasource.
Each entry mapped a user's email to a role (Admin, Manager, etc.).
On app start, 
I used the User().Email function and stored the user’s role in a global variable:
Set(userRole, LookUp(SecurityRoleList, UserEmail = User().Email, Role))

Then, I used this variable to dynamically show/hide controls or navigate users:
If(userRole = "Admin", Navigate(AdminScreen), Navigate(UserScreen))

For buttons or components: Visible: userRole = "Manager"
---------------------------------------------------------------------------------------------------------------------------------------------





















