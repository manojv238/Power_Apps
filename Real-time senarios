1. How to call Power Apps to Power Automate:-

"Yes, Iâ€™ve worked on calling Power Automate from Power Apps in several use cases. Here's how I approach it:
ðŸ”¹ Step 1: I create an Instant cloud flow in Power Automate
I use the PowerApps trigger as the starting point.
If I need to pass values like user input or form data, I use â€˜Ask in PowerAppsâ€™ inside actions like Initialize variable or Compose.
Then, I add logic like creating a SharePoint item or sending email.
If needed, I include a â€˜Respond to PowerAppsâ€™ action to return data like a confirmation message or record ID back to the app.

ðŸ”¹ Step 2: In Power Apps, I call the flow using the .Run() function
For example, in a buttonâ€™s OnSelect, I use:
SubmitFlow.Run(TextInput1.Text)
This passes user input directly to the flow.
I also handle success/failure messages using Notify() funtion for better user experience.
----------------------------------------------------------------------------------------------------------------------------------------

2. Explain real-time challenges you faced while working on Canvas App and Model-Driven App, and how you overcame them:

ðŸ”¹ Challenge-1: Delegation Limit with SharePoint (5000+ items)
---------------------------------------------------------------
"In one of my Canvas Apps, we were using SharePoint as the data source, and the list had more than 5000 records.
Because of the delegation limit, only 500 records were loading, and filters or searches didnâ€™t work properly for the full list.

ðŸ’¡ How I Solved It:
I used delegable functions like Filter() and StartsWith() instead of non-delegable ones like Search() and ForAll().
Indexed the columns in SharePoint (like Title, Status) to support delegation.
Implemented pagination logic when needed, using FirstN() and Skip() for loading large datasets in smaller chunks.
Used ClearCollect() on app start to store only required filtered data locally to improve performance.

ðŸ”¹ Challenge-2: Dynamic Visibility Based on User Roles
-------------------------------------------------------
"In one of our Canvas Apps, different users (Admins, Managers, Staff) needed to see different screens, buttons, and data based on their security role. 
But since Canvas Apps donâ€™t support role-based access natively like model-driven apps, it became difficult to control visibility dynamically."

ðŸ”§ How I Overcame It:
I created a custom Security Role table in SharePoint (you can also use Dataverse).
Each entry mapped a user's email to a role (Admin, Manager, etc.).
On app start, 
I used the User().Email function and stored the userâ€™s role in a global variable:
Set(userRole, LookUp(SecurityRoleList, UserEmail = User().Email, Role))

Then, I used this variable to dynamically show/hide controls or navigate users:
If(userRole = "Admin", Navigate(AdminScreen), Navigate(UserScreen))

For buttons or components: Visible: userRole = "Manager"

ðŸ”¹ Challenge-3: File upload from Power Apps to SharePoint
---------------------------------------------------------
"In one of my Canvas App projects, users needed to upload files like images or PDFs and store them in a SharePoint document library.
But Canvas Apps donâ€™t support direct file uploads to SharePoint."

ðŸ’¡ How I solved it:
I added the Add Picture control in the app so users could select a file.
Used Power Automate to handle the upload logic.
Called the flow from Power Apps using the .Run() function: UploadFileFlow.Run(AddMediaButton1.Media, "filename.pdf")
In Power Automate:
Used the PowerApps trigger
Converted the media to Base64
Used Create File action to upload to SharePoint































