STEELCASE PROJECT EXPLANATION IN REAL-TIME:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📘 Project Description:

👉 Steelcase is one of the oldest and largest furniture manufacturers in the USA, 
   specializing in the design, production, and distribution of integrated office furniture, architectural solutions, and workplace technologies. 
👉 Their clientele spans across office, education, healthcare, and retail sectors.

👉 As a Power Apps Developer, I was responsible for designing and implementing business applications to automate internal operations and streamline workflows.

🔧 Key Responsibilities & Highlights:
👉 Developed Canvas Apps for internal teams including:

1. Inventory Management App    – to track furniture stock and optimize asset availability across warehouses.
2. Purchase Order Tracking App – enabled procurement teams to monitor vendor orders and delivery timelines.

👉 Integrated SharePoint Online lists and SQL Server as data sources for real-time data operations.

👉 Used Power Automate to build automated workflows for:
✅ Approval processes and sending Notifications

👉 Designed responsive and role-based UIs tailored to department-specific needs.

👉 Applied patch functions, collections, and delegation techniques to improve performance and scalability.

👉 Ensured data security using SharePoint permissions and Power Apps role-based access control.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ App 1: Inventory Management App – Responsive Canvas App
🎯 Purpose: "I developed a responsive Inventory Management App using Canvas App to help a client manage furniture stock across multiple warehouses."

🔧 Key Highlights:
📱 Responsive Design: Built using containers and relative positioning to auto-adjust across all devices desktop, tablet, and mobile.

🔧 Data Source: Used a SharePoint List (or Dataverse Table) named Inventory.
🗂️ Key columns included: ProductID, ProductName, Category, Quantity, WarehouseLocation.


🛠️ Canvas App Features I Built:

🏠 Home Screen:
– Gallery to display inventory Products.
– Search box to filter by Product name.
– Dropdowns to filter by Category and WarehouseLocation.

ℹ️ Item Details Screen:
– On selecting an inventory Product → Navigate to a screen showing record details eg., Product name, Quantity, Category, Location.

➕ Add Item Screen:
– Add Item Screen: Used a Form Control for admins to add new Product.
– Used SubmitForm() to save into SharePoint or Dataverse.

🔴 Low Stock Alerts:
– Added Red Icon/Label if QuantityAvailable < 5.

5️⃣ Warehouse View:
– Used GroupBy() to group inventory by warehouse
– Displayed total quantity per warehouse for better planning.


🧠 Logic Highlights:
– Used If() and Switch() for conditional UI rendering.
– Applied Sort(), Filter(), and GroupBy() for dynamic data manipulation.
– Managed delegation for performance with SharePoint.


📈 Impact:
🔔 Reduced stock-out incidents by flagging low inventory in real-time.
🏭 Gave warehouse managers a clear and grouped view of stock per location.
📱 Enabled mobile access for staff to track, update, and view inventory on the go.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ App 2: Purchase Order Tracking App
🎯 Purpose: To help the procurement team track vendor orders, delivery timelines, and statuses in real-time — reducing delays and improving efficiency.

🔧 Data Source: Used a SharePoint List (or Dataverse Table) named 📄 PurchaseOrders.
🗂️ Key Columns:

🔢 PO_ID (Text)
🏭 VendorName (Text)
📦 ItemOrdered (Text)
📅 OrderDate, DeliveryDate (DateTime)
📌 Status (Choice: Pending, In-Transit, Delivered)
🔢 QuantityOrdered (Number)


🛠️ Canvas App Features I Built:

1️⃣ Dashboard Screen:
🖼️ Created a Gallery to list all orders
🎨 Conditional formatting:
🟡 Yellow = Pending
🔵 Blue = In-Transit
✅ Green = Delivered

🔍 Search & Filter:
👉 Dropdown to filter by Status
👉 Date Picker to filter by OrderDate range

2️⃣ Order Details Screen:
📋 On selecting a record → navigate to a detailed screen
✏️ Added Edit button to update status
💡 Used Patch() to update data directly to SharePoint/Dataverse

3️⃣ Add New Purchase Order:
➕ Created a Form Screen to add new orders
📨 Used SubmitForm() to save data
✅ OnSuccess → showed a toast message and navigated back to Dashboard


🧠 Extra Logic Used:
🧮 Used Filter() + Search() for optimized querying
🚫 Handled delegation warnings to support large data
🔐 Applied role-based access with User().Email logic (e.g., only procurement users can edit)


📈 Impact:
📉 Eliminated manual Excel/email-based tracking
🕒 Enabled real-time order visibility across teams
📲 Provided mobile-ready access for tracking & status updates
🤝 Improved vendor coordination and delivery planning



